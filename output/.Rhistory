# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
disasters_filtered=reactive({
filtered_data = filter(monthly_disasters, state == input$state)
filtered_data = arrange(filtered_data, incidentBeginMonth)
filtered_data$incidentBeginMonth = as.Date(paste0(filtered_data$incidentBeginMonth, "-01"))
filtered_data
})
disaster_ts=reactive({
start_year = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%Y"))
start_month = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%m"))
ts(disasters_filtered()$NumberOfDisasters, start = c(start_year, start_month), frequency = 12)
})
output$arima_summary = renderPrint({
arima(disaster_ts(),c(input$AR,input$I,input$MA))
})
output$forecast_plot = renderPlot({
fit=arima(disaster_ts(),c(input$AR,input$I,input$MA))
forecast_values <- forecast(fit, h=10)
plot(forecast_values, main="ARIMA Forecast", xlab="Time", ylab="Value")
})
output$acf_plot = renderPlot({
acf(disaster_ts(),main='ACF')
})
output$pacf_plot = renderPlot({
pacf(disaster_ts(),main='PACF')
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel('Statistical Analysis',
sidebarPanel(selectInput("year", "Choose a Year:", choices = sort(unique(year(combined$incidentBeginDate)), decreasing = TRUE),2023),
selectInput("disasterType", "Choose a Disaster Type:", choices = unique(combined$incidentType))
),
mainPanel(
plotOutput("stat_hist")
)
),
tabPanel("ARIMA",
sidebarPanel(selectInput("state", "Choose a State:",choices=unique(monthly_disasters$state)),
sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary"),
plotOutput("forecast_plot")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Statistical Analysis
filtered_data <- reactive({
combined %>%
filter(year(incidentBeginDate) == input$year,
incidentType == input$disasterType)
})
# 在UI中显示直方图
output$stat_hist <- renderPlot({
# 从过滤后的数据中提取州和发生次数列
states <- filtered_data()$state
occurrences <- sort(table(states),decreasing = TRUE)
# 绘制直方图
barplot(occurrences, main = "Disaster Occurrences by State", xlab = "State", ylab = "Number of Occurrences", col = "lightblue", border = "black")
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
disasters_filtered=reactive({
filtered_data = filter(monthly_disasters, state == input$state)
filtered_data = arrange(filtered_data, incidentBeginMonth)
filtered_data$incidentBeginMonth = as.Date(paste0(filtered_data$incidentBeginMonth, "-01"))
filtered_data
})
disaster_ts=reactive({
start_year = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%Y"))
start_month = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%m"))
ts(disasters_filtered()$NumberOfDisasters, start = c(start_year, start_month), frequency = 12)
})
output$arima_summary = renderPrint({
arima(disaster_ts(),c(input$AR,input$I,input$MA))
})
output$forecast_plot = renderPlot({
fit=arima(disaster_ts(),c(input$AR,input$I,input$MA))
forecast_values <- forecast(fit, h=10)
plot(forecast_values, main="ARIMA Forecast", xlab="Time", ylab="Value")
})
output$acf_plot = renderPlot({
acf(disaster_ts(),main='ACF')
})
output$pacf_plot = renderPlot({
pacf(disaster_ts(),main='PACF')
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel('Statistical Analysis',
sidebarPanel(selectInput("year", "Choose a Year:", choices = sort(unique(year(combined$incidentBeginDate)), decreasing = TRUE),2023),
selectInput("disasterType", "Choose a Disaster Type:", choices = unique(combined$incidentType))
),
mainPanel(
plotOutput("stat_hist")
)
),
tabPanel("ARIMA",
sidebarPanel(selectInput("state", "Choose a State:",choices=unique(monthly_disasters$state)),
sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary"),
plotOutput("forecast_plot")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Statistical Analysis
filtered_data <- reactive({
combined %>%
filter(year(incidentBeginDate) == input$year,
incidentType == input$disasterType)
})
# 在UI中显示直方图
output$stat_hist <- renderPlot({
# 从过滤后的数据中提取州和发生次数列
states <- filtered_data()$state
occurrences <- sort(table(states),decreasing = TRUE)
# 绘制直方图
barplot(occurrences, main = "Disaster Occurrences by State", xlab = "State", ylab = "Number of Occurrences", col = "lightblue", border = "black")
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
disasters_filtered=reactive({
filtered_data = filter(monthly_disasters, state == input$state)
filtered_data = arrange(filtered_data, incidentBeginMonth)
filtered_data$incidentBeginMonth = as.Date(paste0(filtered_data$incidentBeginMonth, "-01"))
filtered_data
})
disaster_ts=reactive({
start_year = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%Y"))
start_month = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%m"))
tem=ts(disasters_filtered()$NumberOfDisasters, start = c(start_year, start_month), frequency = 12)
tem
})
output$arima_summary = renderPrint({
arima(disaster_ts(),c(input$AR,input$I,input$MA))
})
output$forecast_plot = renderPlot({
fit=arima(disaster_ts(),c(input$AR,input$I,input$MA))
forecast_values <- forecast(fit, h=10)
plot(forecast_values, main="ARIMA Forecast", xlab="Time", ylab="Value")
})
output$acf_plot = renderPlot({
acf(disaster_ts(),main='ACF')
})
output$pacf_plot = renderPlot({
pacf(disaster_ts(),main='PACF')
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel('Statistical Analysis',
sidebarPanel(selectInput("year", "Choose a Year:", choices = sort(unique(year(combined$incidentBeginDate)), decreasing = TRUE),2023),
selectInput("disasterType", "Choose a Disaster Type:", choices = unique(combined$incidentType))
),
mainPanel(
plotOutput("stat_hist")
)
),
tabPanel("ARIMA",
sidebarPanel(selectInput("state", "Choose a State:",choices=unique(monthly_disasters$state)),
sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary"),
plotOutput("forecast_plot")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Statistical Analysis
filtered_data <- reactive({
combined %>%
filter(year(incidentBeginDate) == input$year,
incidentType == input$disasterType)
})
# 在UI中显示直方图
output$stat_hist <- renderPlot({
# 从过滤后的数据中提取州和发生次数列
states <- filtered_data()$state
occurrences <- sort(table(states),decreasing = TRUE)
# 绘制直方图
barplot(occurrences, main = "Disaster Occurrences by State", xlab = "State", ylab = "Number of Occurrences", col = "lightblue", border = "black")
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
disasters_filtered=reactive({
filtered_data = filter(monthly_disasters, state == input$state)
filtered_data = arrange(filtered_data, incidentBeginMonth)
filtered_data$incidentBeginMonth = as.Date(paste0(filtered_data$incidentBeginMonth, "-01"))
filtered_data
})
disaster_ts=reactive({
start_year = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%Y"))
start_month = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%m"))
tem=ts(disasters_filtered()$NumberOfDisasters, start = c(start_year, start_month), frequency = 12)
return(tem)
})
output$arima_summary = renderPrint({
arima(disaster_ts(),c(input$AR,input$I,input$MA))
})
output$forecast_plot = renderPlot({
fit=arima(disaster_ts(),c(input$AR,input$I,input$MA))
forecast_values <- forecast(fit, h=10)
plot(forecast_values, main="ARIMA Forecast", xlab="Time", ylab="Value")
})
output$acf_plot = renderPlot({
acf(disaster_ts(),main='ACF')
})
output$pacf_plot = renderPlot({
pacf(disaster_ts(),main='PACF')
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel('Statistical Analysis',
sidebarPanel(selectInput("year", "Choose a Year:", choices = sort(unique(year(combined$incidentBeginDate)), decreasing = TRUE),2023),
selectInput("disasterType", "Choose a Disaster Type:", choices = unique(combined$incidentType))
),
mainPanel(
plotOutput("stat_hist")
)
),
tabPanel("ARIMA",
sidebarPanel(selectInput("state", "Choose a State:",choices=unique(monthly_disasters$state)),
sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary"),
plotOutput("forecast_plot")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Statistical Analysis
filtered_data <- reactive({
combined %>%
filter(year(incidentBeginDate) == input$year,
incidentType == input$disasterType)
})
# 在UI中显示直方图
output$stat_hist <- renderPlot({
# 从过滤后的数据中提取州和发生次数列
states <- filtered_data()$state
occurrences <- sort(table(states),decreasing = TRUE)
# 绘制直方图
barplot(occurrences, main = "Disaster Occurrences by State", xlab = "State", ylab = "Number of Occurrences", col = "lightblue", border = "black")
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
disasters_filtered=reactive({
filtered_data = filter(monthly_disasters, state == input$state)
filtered_data = arrange(filtered_data, incidentBeginMonth)
filtered_data$incidentBeginMonth = as.Date(paste0(filtered_data$incidentBeginMonth, "-01"))
filtered_data
})
disaster_ts=reactive({
start_year = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%Y"))
start_month = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%m"))
tem=ts(disasters_filtered()$NumberOfDisasters, start = c(start_year, start_month), frequency = 12)
return(tem)
})
output$arima_summary = renderPrint({
arima(isolate(disaster_ts()),c(input$AR,input$I,input$MA))
})
output$forecast_plot = renderPlot({
fit=arima(isolate(disaster_ts()),c(input$AR,input$I,input$MA))
forecast_values <- forecast(fit, h=10)
plot(forecast_values, main="ARIMA Forecast", xlab="Time", ylab="Value")
})
output$acf_plot = renderPlot({
acf(isolate(disaster_ts()),main='ACF')
})
output$pacf_plot = renderPlot({
pacf(isolate(disaster_ts()),main='PACF')
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel('Statistical Analysis',
sidebarPanel(selectInput("year", "Choose a Year:", choices = sort(unique(year(combined$incidentBeginDate)), decreasing = TRUE),2023),
selectInput("disasterType", "Choose a Disaster Type:", choices = unique(combined$incidentType))
),
mainPanel(
plotOutput("stat_hist")
)
),
tabPanel("ARIMA",
sidebarPanel(selectInput("state", "Choose a State:",choices=unique(monthly_disasters$state)),
sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary"),
plotOutput("forecast_plot")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Statistical Analysis
filtered_data <- reactive({
combined %>%
filter(year(incidentBeginDate) == input$year,
incidentType == input$disasterType)
})
# 在UI中显示直方图
output$stat_hist <- renderPlot({
# 从过滤后的数据中提取州和发生次数列
states <- filtered_data()$state
occurrences <- sort(table(states),decreasing = TRUE)
# 绘制直方图
barplot(occurrences, main = "Disaster Occurrences by State", xlab = "State", ylab = "Number of Occurrences", col = "lightblue", border = "black")
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
disasters_filtered=reactive({
filtered_data = filter(monthly_disasters, state == input$state)
filtered_data = arrange(filtered_data, incidentBeginMonth)
filtered_data$incidentBeginMonth = as.Date(paste0(filtered_data$incidentBeginMonth, "-01"))
filtered_data
})
disaster_ts=reactive({
start_year = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%Y"))
start_month = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%m"))
tem=ts(disasters_filtered()$NumberOfDisasters, start = c(start_year, start_month), frequency = 12)
return(tem)
})
output$arima_summary = renderPrint({
arima(disaster_ts(),c(input$AR,input$I,input$MA))
})
output$forecast_plot = renderPlot({
fit=arima(disaster_ts(),c(input$AR,input$I,input$MA))
forecast_values <- forecast(fit, h=10)
plot(forecast_values, main="ARIMA Forecast", xlab="Time", ylab="Value")
})
output$acf_plot = renderPlot({
acf(disaster_ts(),main='ACF')
})
output$pacf_plot = renderPlot({
pacf(disaster_ts(),main='PACF')
})
session$onSessionEnded(function() {
# Clean up code here
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel('Statistical Analysis',
sidebarPanel(selectInput("year", "Choose a Year:", choices = sort(unique(year(combined$incidentBeginDate)), decreasing = TRUE),2023),
selectInput("disasterType", "Choose a Disaster Type:", choices = unique(combined$incidentType))
),
mainPanel(
plotOutput("stat_hist")
)
),
tabPanel("ARIMA",
sidebarPanel(selectInput("state", "Choose a State:",choices=unique(monthly_disasters$state)),
sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary"),
plotOutput("forecast_plot")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Statistical Analysis
filtered_data <- reactive({
combined %>%
filter(year(incidentBeginDate) == input$year,
incidentType == input$disasterType)
})
# 在UI中显示直方图
output$stat_hist <- renderPlot({
# 从过滤后的数据中提取州和发生次数列
states <- filtered_data()$state
occurrences <- sort(table(states),decreasing = TRUE)
# 绘制直方图
barplot(occurrences, main = "Disaster Occurrences by State", xlab = "State", ylab = "Number of Occurrences", col = "lightblue", border = "black")
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
disasters_filtered=reactive({
filtered_data = filter(monthly_disasters, state == input$state)
filtered_data = arrange(filtered_data, incidentBeginMonth)
filtered_data$incidentBeginMonth = as.Date(paste0(filtered_data$incidentBeginMonth, "-01"))
filtered_data
})
disaster_ts=reactive({
start_year = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%Y"))
start_month = as.numeric(format(min(disasters_filtered()$incidentBeginMonth), "%m"))
tem=ts(disasters_filtered()$NumberOfDisasters, start = c(start_year, start_month), frequency = 12)
return(tem)
})
output$arima_summary = renderPrint({
arima(disaster_ts(),c(input$AR,input$I,input$MA))
})
output$forecast_plot = renderPlot({
fit=arima(disaster_ts(),c(input$AR,input$I,input$MA))
forecast_values <- forecast(fit, h=10)
plot(forecast_values, main="ARIMA Forecast", xlab="Time", ylab="Value")
})
output$acf_plot = renderPlot({
acf(disaster_ts(),main='ACF')
})
output$pacf_plot = renderPlot({
pacf(disaster_ts(),main='PACF')
})
}
)
