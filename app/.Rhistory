tabsetPanel(
tabPanel("Statistic Analysis",
sidebarPanel(selectInput("disasterType", "Choose a Disaster Type:",choices = unique(combined$incidentType)),
dateRangeInput("dateRange", "Select Date Range:", start = min(combined$incidentBeginDate), end = max(combined$incidentEndDate)))
),
tabPanel("ARIMA",
sidebarPanel(sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
sidebarPanel("ACF")
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Reactive expression to filter data based on inputs
filtered_data <- reactive({
combined %>%
filter(incidentType == input$disasterType,
incidentBeginDate >= input$dateRange[1],
incidentEndDate <= input$dateRange[2])
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
output$arima_summary = renderPrint({
summary(arima(disaster_ts,input$AR,input$I,input$MA))
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel("Statistic Analysis",
sidebarPanel(selectInput("disasterType", "Choose a Disaster Type:",choices = unique(combined$incidentType)),
dateRangeInput("dateRange", "Select Date Range:", start = min(combined$incidentBeginDate), end = max(combined$incidentEndDate)))
),
tabPanel("ARIMA",
sidebarPanel(sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
sidebarPanel("ACF"),
output$arima_summary
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Reactive expression to filter data based on inputs
filtered_data <- reactive({
combined %>%
filter(incidentType == input$disasterType,
incidentBeginDate >= input$dateRange[1],
incidentEndDate <= input$dateRange[2])
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
output$arima_summary = renderPrint({
summary(arima(disaster_ts,input$AR,input$I,input$MA))
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel("Statistic Analysis",
sidebarPanel(selectInput("disasterType", "Choose a Disaster Type:",choices = unique(combined$incidentType)),
dateRangeInput("dateRange", "Select Date Range:", start = min(combined$incidentBeginDate), end = max(combined$incidentEndDate)))
),
tabPanel("ARIMA",
sidebarPanel(sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
sidebarPanel("ACF"),
verbatimTextOutput("arima_summary")
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Reactive expression to filter data based on inputs
filtered_data <- reactive({
combined %>%
filter(incidentType == input$disasterType,
incidentBeginDate >= input$dateRange[1],
incidentEndDate <= input$dateRange[2])
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
output$arima_summary = renderPrint({
summary(arima(disaster_ts,input$AR,input$I,input$MA))
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel("Statistic Analysis",
sidebarPanel(selectInput("disasterType", "Choose a Disaster Type:",choices = unique(combined$incidentType)),
dateRangeInput("dateRange", "Select Date Range:", start = min(combined$incidentBeginDate), end = max(combined$incidentEndDate)))
),
tabPanel("ARIMA",
sidebarPanel(sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Reactive expression to filter data based on inputs
filtered_data <- reactive({
combined %>%
filter(incidentType == input$disasterType,
incidentBeginDate >= input$dateRange[1],
incidentEndDate <= input$dateRange[2])
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
output$arima_summary = renderPrint({
summary(arima(disaster_ts,input$AR,input$I,input$MA))
})
output$acf_plot = renderPlot({
acf(disaster_ts,main='ACF')
})
output$pacf_plot = renderPlot({
pacf(disaster_ts,main='PACF')
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel("Statistic Analysis",
sidebarPanel(selectInput("disasterType", "Choose a Disaster Type:",choices = unique(combined$incidentType)),
dateRangeInput("dateRange", "Select Date Range:", start = min(combined$incidentBeginDate), end = max(combined$incidentEndDate)))
),
tabPanel("ARIMA",
sidebarPanel(sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Reactive expression to filter data based on inputs
filtered_data <- reactive({
combined %>%
filter(incidentType == input$disasterType,
incidentBeginDate >= input$dateRange[1],
incidentEndDate <= input$dateRange[2])
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
output$arima_summary = renderPrint({
summary(arima(disaster_ts,as.integer(input$AR),as.integer(input$I),as.integer(input$MA)))
})
output$acf_plot = renderPlot({
acf(disaster_ts,main='ACF')
})
output$pacf_plot = renderPlot({
pacf(disaster_ts,main='PACF')
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel("Statistic Analysis",
sidebarPanel(selectInput("disasterType", "Choose a Disaster Type:",choices = unique(combined$incidentType)),
dateRangeInput("dateRange", "Select Date Range:", start = min(combined$incidentBeginDate), end = max(combined$incidentEndDate)))
),
tabPanel("ARIMA",
sidebarPanel(sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Reactive expression to filter data based on inputs
filtered_data <- reactive({
combined %>%
filter(incidentType == input$disasterType,
incidentBeginDate >= input$dateRange[1],
incidentEndDate <= input$dateRange[2])
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
output$arima_summary = renderPrint({
summary(arima(disaster_ts,c(input$AR,input$I,input$MA)))
})
output$acf_plot = renderPlot({
acf(disaster_ts,main='ACF')
})
output$pacf_plot = renderPlot({
pacf(disaster_ts,main='PACF')
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel("Statistic Analysis",
sidebarPanel(selectInput("disasterType", "Choose a Disaster Type:",choices = unique(combined$incidentType)),
dateRangeInput("dateRange", "Select Date Range:", start = min(combined$incidentBeginDate), end = max(combined$incidentEndDate)))
),
tabPanel("ARIMA",
sidebarPanel(sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Reactive expression to filter data based on inputs
filtered_data <- reactive({
combined %>%
filter(incidentType == input$disasterType,
incidentBeginDate >= input$dateRange[1],
incidentEndDate <= input$dateRange[2])
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
output$arima_summary = renderPrint({
summary(arima(disaster_ts,c(input$AR,input$I,input$MA)))
})
output$acf_plot = renderPlot({
par(mfrow = c(1, 1), mar = c(5, 4, 4, 2) + 0.1)
acf(disaster_ts,main='ACF')
})
output$pacf_plot = renderPlot({
par(mfrow = c(1, 1), mar = c(5, 4, 4, 2) + 0.1)
pacf(disaster_ts,main='PACF')
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel("Statistic Analysis",
sidebarPanel(selectInput("disasterType", "Choose a Disaster Type:",choices = unique(combined$incidentType)),
dateRangeInput("dateRange", "Select Date Range:", start = min(combined$incidentBeginDate), end = max(combined$incidentEndDate)))
),
tabPanel("ARIMA",
sidebarPanel(sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Reactive expression to filter data based on inputs
filtered_data <- reactive({
combined %>%
filter(incidentType == input$disasterType,
incidentBeginDate >= input$dateRange[1],
incidentEndDate <= input$dateRange[2])
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
output$arima_summary = renderPrint({
summary(arima(disaster_ts,c(input$AR,input$I,input$MA)))
})
output$acf_plot = renderPlot({
par(mfrow = c(1, 1), pin = c(2, 1))
acf(disaster_ts,main='ACF')
})
output$pacf_plot = renderPlot({
par(mfrow = c(1, 1), pin = c(2, 1))
pacf(disaster_ts,main='PACF')
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel("Statistic Analysis",
sidebarPanel(selectInput("disasterType", "Choose a Disaster Type:",choices = unique(combined$incidentType)),
dateRangeInput("dateRange", "Select Date Range:", start = min(combined$incidentBeginDate), end = max(combined$incidentEndDate)))
),
tabPanel("ARIMA",
sidebarPanel(sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Reactive expression to filter data based on inputs
filtered_data <- reactive({
combined %>%
filter(incidentType == input$disasterType,
incidentBeginDate >= input$dateRange[1],
incidentEndDate <= input$dateRange[2])
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
output$arima_summary = renderPrint({
summary(arima(disaster_ts,c(input$AR,input$I,input$MA)))
})
output$acf_plot = renderPlot({
acf(disaster_ts,main='ACF')
})
output$pacf_plot = renderPlot({
pacf(disaster_ts,main='PACF')
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel("Statistic Analysis",
sidebarPanel(selectInput("disasterType", "Choose a Disaster Type:",choices = unique(combined$incidentType)),
dateRangeInput("dateRange", "Select Date Range:", start = min(combined$incidentBeginDate), end = max(combined$incidentEndDate)))
),
tabPanel("ARIMA",
sidebarPanel(sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0),
plotOutput("acf_plot"),
plotOutput("pacf_plot")),
mainPanel(verbatimTextOutput("arima_summary")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Reactive expression to filter data based on inputs
filtered_data <- reactive({
combined %>%
filter(incidentType == input$disasterType,
incidentBeginDate >= input$dateRange[1],
incidentEndDate <= input$dateRange[2])
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
output$arima_summary = renderPrint({
summary(arima(disaster_ts,c(input$AR,input$I,input$MA)))
})
output$acf_plot = renderPlot({
acf(disaster_ts,main='ACF')
})
output$pacf_plot = renderPlot({
pacf(disaster_ts,main='PACF')
})
}
)
shinyApp(
ui <- fluidPage(
titlePanel("Disaster Analysis Dashboard"),
tabsetPanel(
tabPanel("Statistic Analysis",
sidebarPanel(selectInput("disasterType", "Choose a Disaster Type:",choices = unique(combined$incidentType)),
dateRangeInput("dateRange", "Select Date Range:", start = min(combined$incidentBeginDate), end = max(combined$incidentEndDate)))
),
tabPanel("ARIMA",
sidebarPanel(sliderInput("AR", "Choose p:",0,10,0),
sliderInput("I", "Choose d:",0,10,0),
sliderInput("MA", "Choose q:",0,10,0)),
mainPanel(plotOutput("acf_plot"),
plotOutput("pacf_plot"),
verbatimTextOutput("arima_summary")
)
),
tabPanel("MAP",
)
)
),
server <- function(input, output, session) {
# Reactive expression to filter data based on inputs
filtered_data <- reactive({
combined %>%
filter(incidentType == input$disasterType,
incidentBeginDate >= input$dateRange[1],
incidentEndDate <= input$dateRange[2])
})
# Map output
output$disasterMap <- renderLeaflet({
# Use your filtered_data() to create the map
})
# Trend plot output
output$trendPlot <- renderPlot({
# Use your filtered_data() to create the plot
})
#ARIMA
output$arima_summary = renderPrint({
summary(arima(disaster_ts,c(input$AR,input$I,input$MA)))
})
output$acf_plot = renderPlot({
acf(disaster_ts,main='ACF')
})
output$pacf_plot = renderPlot({
pacf(disaster_ts,main='PACF')
})
}
)
